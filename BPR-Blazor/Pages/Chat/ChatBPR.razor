@page "/chat/{chatId}"
<section class="index">
<div class="d-flex flex-grow-1 flex-row" style="margin-top: 50px;">
    <MudPaper Elevation = "25"  Class = "py-16 flex-grow-1 static">
        <h3>trest</h3>
        <MudToolBar Class="static" style="margin-top: -68px;">
            
            @if (id == 0)
            {
               <MudIcon Icon="@Icons.Material.Outlined.Person"  Style="width: 35px"></MudIcon> <MudText  Typo="Typo.h6">chat</MudText>
              
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble"  Style="width: 35px"></MudIcon>
                <MudText  Typo="Typo.h6">Chat with @chatId</MudText>
            }
            @if (chat.Username == username)
               {
                     <MudButton Variant="Variant.Filled" style="display: absolute; left:10px;" Color="Color.Primary" OnClick="@ToggleOpen">
		             @(_isOpen? "Close" : "Manage")
	                 </MudButton>
                <MudPopover Open="@_isOpen" Fixed="true" Class="px-1 pt-1" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.BottomLeft">
			  <MudTextField T="string" Placeholder="Enter a user..."DisableUnderLine="true" Class="mt-n2 mx-4"
                     @bind-Value="usernameToAdd" For="@(()=> usernameToAdd)" />
                      <MudButton OnClick="addUser" StartIcon="@Icons.Filled.Add" Color="Color.Secondary" Style="color:{Colors.Pink.Lighten2}" ButtonType="ButtonType.Button">Add</MudButton>
                           <MudDivider />
                     <MudTextField T="string" Placeholder="Enter a user..."DisableUnderLine="true" Class="mt-n2 mx-4"
                      @bind-Value="usernameToDelete" For="@(()=> usernameToDelete)" />
                        <MudButton OnClick="deleteUser" StartIcon="@Icons.Filled.HorizontalRule" Color="Color.Secondary" Style="color:{Colors.Pink.Lighten2}" ButtonType="ButtonType.Button">Delete</MudButton>
                    </MudPopover>
             }
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll; display: static;" id="chatContainer">
            @foreach (var message in messages)
            {
                @if (message.Username != @username)
                {
                  <div class="d-flex flex-row my-4">
                    <div class="mr-4">
                        <MudAvatar Class="static" Color="Color.Secondary" Style="height:50px; width:50px;">@message.Username.ToUpper().FirstOrDefault()</MudAvatar>
                    </div>
                    <div>
                        <MudText Typo="Typo.body1">@message.Username</MudText>
                        <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                        <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message.Content</MudText>
                    </div>
                </div>  
                }
                else
                {
                    <div class="d-flex flex-row-reverse my-4">
                        <div class="ml-4">
                            <MudAvatar Color="Color.Primary" Style="height:50px; width:50px;">@message.Username.ToUpper().FirstOrDefault()</MudAvatar>
                        </div>
                        <div>
                            <MudText Typo="Typo.body1">@message.Username</MudText>
                            <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                            <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message.Content</MudText>
                        </div>
                    </div>
                }
                
            }
        </div>
        <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4 static" Style="margin-top: 50px;">
            <MudTextField Style="display : static;" Class="mt-n2 mx-4 static" T="string" Placeholder="Enter your message here..." DisableUnderLine="true" 
                @bind-Value="CurrentMessage" For="@(()=> CurrentMessage)" />
                <MudButton Class="static" OnClick="SubmitAsync" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Secondary" Style="color:{Colors.Pink.Lighten2}" ButtonType="ButtonType.Button">Send</MudButton>
        </MudPaper>
    </MudPaper>
    <MudPaper Elevation="25" Class="pa-3 ml-6" MinWidth="350px">
            <MudToolBar Dense="true">
                <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
                <MudText Typo="Typo.h6">Chats</MudText>

                    
                
            </MudToolBar>
            <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
                <MudList Clickable="true">
                    @foreach (var chat in chats)
                    {    
                        <MudListItem Class="pa-0 px-2">
                            <div class="d-flex flex-row mt-n1 mb-n1">
                                <div class="mr-4">
                                    <a href="/chat/@chat.chatId"><MudBadge Class="my-2">
                                        @if (chat.chatId == id)
                                        {
                                           // <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@chat.ChatName.ToUpper().FirstOrDefault()</MudAvatar>
                                           <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@chat.chatId</MudAvatar>
                                        }
                                        else
                                        {
                                           // <MudAvatar Color="Color.Dark" Style="height:50px; width:50px;">@chat.ChatName.ToUpper().FirstOrDefault()</MudAvatar>
                                            <MudAvatar Color="Color.Dark" Style="height:50px; width:50px;">@chat.chatId</MudAvatar>
                                        }
                                    </MudBadge>
                                    </a>
                                </div>
                                <div>
                                    <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@chat.Username</MudText>
                                    <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@chat.chatId</MudText>
                                </div>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            </div>
        </MudPaper>
        
        
</div>
        @if(showAlert){
         @if (isSuccess)
            {
            <MudAlert Severity="Severity.Success"  style="float: right; padding: 10px;" Variant="Variant.Outlined">@response</MudAlert>
            }
            else{
                <MudAlert Severity="Severity.Error"  style="float: right; padding: 10px;" Variant="Variant.Outlined">@response</MudAlert>
            }
        }
</section>

@code{
     [Parameter] 
     public string chatId{get; set;}
     public int id = 0;
    [Parameter] 
    public string CurrentMessage { get; set; }
    private ChatDTO chat = new ChatDTO();
    private List<ChatDTO> chats = new List<ChatDTO>();
    private List<MessageDTO> messages = new List<MessageDTO>();
    private string username = "";
    public bool _isOpen, showAlert, isSuccess = false;
    private string usernameToAdd, usernameToDelete, result, response = "";
    private string sampleText = "Type your message here";
    

	public void ToggleOpen()
	{
		if (_isOpen)
			_isOpen = false;
		else
			_isOpen = true;
	}
    protected override async Task OnInitializedAsync()
    {
        id = int.Parse(chatId);
        var authState  = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        username = user.Identity.Name.ToString();
        
        chat = await ChatService.GetChat(username,id);
        chats = await ChatService.GetChatList(user.Identity.Name);
        messages = await ChatService.GetMessages(username,id);
        Console.WriteLine(chat.Id + " " + chat.Username + " " + chat.ChatName);
    }

    private void SubmitAsync()
    {
        ChatService.SendMessage(username, id, CurrentMessage);
        CurrentMessage = "";
        
        //add here possible javascript method
        
    }
    private async Task addUser(){
        id = int.Parse(chatId);
        try{
            var answer = await ChatService.AddUsers(username,usernameToAdd, id);
            usernameToAdd = "";
            if(answer.ToString() == "BadRequestSomething went wrong!"){
                showAlert = true;
                isSuccess = false;
                ShowAlert("Something went wrong");
            }
            else{
                showAlert = true;
                isSuccess = true;
                ShowAlert("User added successfully");
            }
        }
        catch(Exception e){
            Console.WriteLine(e);
            isSuccess = false;
            ShowAlert("Something went wrong");
        }
        
    }
    private async Task deleteUser(){
        id = int.Parse(chatId);
        try{
            var answer = await ChatService.RemoveUsers(username,usernameToDelete, id);
            usernameToDelete = "";
            if(answer.ToString() == "BadRequestSomething went wrong!"){
                showAlert = true;
                isSuccess = false;
                ShowAlert("Something went wrong");

            }else{
                showAlert = true;
                isSuccess = true;
                ShowAlert("User deleted successfully");
            }
        }
        catch(Exception e){
            Console.WriteLine(e);
            isSuccess = false;
            ShowAlert("Something went wrong");
        }   
    }
    private async Task ShowAlert(string result){
        showAlert = true;
        response = result;
        await Task.Delay(2000);
        showAlert = false;
        response = "";
    }
    private void hide(){

        sampleText = "";
    }
}