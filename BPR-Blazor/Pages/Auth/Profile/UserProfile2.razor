@page "/profile/{username}"
<div>
  @if (user.FirstName == null || user.FirstName == "")
  {
    
    <FourOFourPR />
    
  }
  else{
<div class="profilePic">
  <img class="profile" src="images/Picture.png" alt="profilepic">
    <h1>@user.FirstName @user.LastName</h1>
    <p>@user.Bio</p>
    @if (user.Email == null)
    {
      <p></p>
    }
    else
    {
      <p>You can contact me at @user.Email</p>
    }
    <div>
      <p>@user.Country</p>
    </div>
    </div>
    <div class="skills">
      @if (loggedUser != username )
      {
        @if (!_alreadyFollows)
        {
          <MudButton Disabled="@_processing" OnClick="FollowUser" Variant="Variant.Filled" Color="Color.Primary">
        @if (_processing)
          {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
           <MudText Class="ms-2">Processing</MudText>
          }
        else
           {
             <MudText>Follow</MudText>
           }
    </MudButton>
        }
        else{
          <MudButton Disabled="@_processing" OnClick="UnFollowUser" Variant="Variant.Filled" Color="Color.Primary">
        @if (_processing)
          {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
           <MudText Class="ms-2">Processing</MudText>
          }
        else
           {
             <MudText>UnFollow</MudText>
           }
    </MudButton>
        }
        
      }
  </div>
  }
</div>
@code{
  [Parameter]
  public string username { get; set; }

  public string loggedUser = "";
  public UserDTO user = new UserDTO();
  private bool _processing, _alreadyFollows = false;
  protected override async Task OnInitializedAsync()
  {
    var authState  = await _authStateProvider.GetAuthenticationStateAsync();
    var loggeduserObj = authState.User;
    loggedUser = loggeduserObj.Identity.Name;
    try{
      user = await UserService.GetUserByUsername(username);
      Console.WriteLine(user.Username);
    }catch(Exception e){
      Console.WriteLine(e);
      navManager.NavigateTo("/404");
    }
    
    if(await PostService.Follow(username) == "UnauthorizedToken invalid!"){
      _alreadyFollows = true;
    }
  }
  private async Task FollowUser()
  {
    _processing = true;
    var result = await PostService.Follow(username);
    Console.WriteLine("Follow result = " + result);
    await Task.Delay(1000);
    _processing = false;
   
  }
  private async Task UnFollowUser()
  {
    _processing = true;
    var result = await PostService.Unfollow(username);
    Console.WriteLine("Follow result = " + result);
    await Task.Delay(1000);
    _processing = false;
   
  }
}