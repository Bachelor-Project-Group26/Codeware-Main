@page "/SignUp"
@attribute [Authorize]
<section class="login-form-1 signup">
    <div class="container">
            <!-- /form -->
            <div class="login-form-grid">
                <div class="login-main">
                    <div class="login-content">
                        <h2>Update your User Profile</h2>
                        <EditForm Model="@_userDetails" OnValidSubmit="SubmitProfile">
                            <DataAnnotationsValidator/>
                            <div class="signup">
                                <label>First Name</label>
                                <InputText @bind-Value="@_userDetails.FirstName" id="input" type="text" class="input"  name="text" autofocus/>
                                <span></span>
                                
                            </div>
                            <div class="signup">
                                <InputText @bind-Value="@_userDetails.LastName" id="input" type="text" class="input"  name="text"  autofocus/>
                                <span></span>
                                <label>Last Name</label>
                            </div>
                            <div class="signup">
                                <InputText @bind-Value="@_userDetails.Email" id="input" type="email" class="input"  name="text"  autofocus/>
                                <span></span>
                                <label>Email</label>
                            </div>
                            <div class="signup">
                                <InputText @bind-Value="@_userDetails.Country" id="input" type="text" class="input" name="text"  autofocus/>
                                <span></span>
                                <label>Country</label>
                            </div>
                            <div class="signup">
                                <InputTextArea @bind-Value="@_userDetails.Bio" id="input" type="text" class="input" name="text"  autofocus/>
                                <span></span>
                                <label>Bio</label>
                            </div>
                            <div class="signup">
                                <InputFile OnChange="@LoadFiles"/>
                                <span></span>
                                <label>Profile Picture</label>
                            </div>
                            <MudDatePicker Label="Enter your birthday" Style="color:{Colors.Blue.Lighten4}" IconSize="Size.Small" Adornment="Adornment.None" ShowWeekNumbers="true" @bind-Date="@date" />
                            <button class="btn" style="margin-top: 15px;" type="submit">Update your profile</button>
                        </EditForm>
                    </div>
                    <div class="login_form align-self">
                        <div class="left_grid_info">
                            <Animate Animation="Animations.FadeDown"  Duration="TimeSpan.FromSeconds(0.6)" >
                            <img src="images/signup.webp" alt="" class="img-fluid">
                            </Animate>
                        </div>
                    </div>
                </div>
            </div>
            <!-- //form -->
        </div>
    </section>
@code {
    private UserDTO _userDetails = new UserDTO();
    private byte[] ms;
    private string username = "";
    public DateTime? date = DateTime.Today;
    private byte[]  _image = new byte[0];
    public IBrowserFile selectedFile { set; get; }
    public readonly long maxFileSize = 1024 * 1024 * 10;
    protected async override void OnInitialized()
    {
        var authState  = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        username = user.Identity.Name;
       Console.WriteLine(username);
    }
    private async void SubmitProfile()
    {
        try{
        var result = await UserService.UpdateDetails(username, 0, _userDetails.FirstName, _userDetails.LastName, _userDetails.Email, _userDetails.Country, _userDetails.Bio, null, date, Convert.ToBase64String(ms.ToArray()));
        navManager.NavigateTo("/profile/" + username);
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async void LoadFiles(InputFileChangeEventArgs e){
        selectedFile = e.File;
        var browserFile = await selectedFile.RequestImageFileAsync("image/png", 500, 500);
        Stream fileStream = browserFile.OpenReadStream(maxFileSize);
        MemoryStream ms = new();
        await fileStream.CopyToAsync(ms);
    }

    // method that takes a IBrowserfile and sends it
    public static async Task<byte[]> GetBytes(IBrowserFile file)
    {
        var ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);
        return ms.ToArray();
    }
}