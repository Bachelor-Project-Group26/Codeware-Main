@page "/post/{postId}"
<div class="index">
 <div class="row pt-3">
            <div class="col-sm-1">
                <img src="images/Picture.png" class="img rounded-circle"
                     style="width: 50px; height: 50px; outline: none; cursor: pointer" @onclick="() => GoToProfile(post.Creator)" />
            </div>
            <div class="col-auto" style="margin-left:-90px;">
                <a class="mr-1" style="color: black;" href="/profile/@(post.Creator)">@(post.Creator)</a>
                <br />
                <span class="mr-1" style="color: gray">@("@" + post.Creator)</span>
            </div>
        </div>
        <div class="row m-2 mt-3">
        <h5>
           <b> @post.Title</b>
        </h5>
        </div>
        <div class="row m-2 mt-3">
            <span style="color: black; word-wrap: break-word; font-size: x-large">@(post.Content)</span>
        </div>

        <div class="row m-2 mt-3 border-bottom border-top border-secondary">
            <span class="mt-3 mb-3" style="color:gray;">@(post.CreatedDate) <button class="btn shadow-none" style="color: gray" @onclick="() => ReactToPost(post.Id)">
                <span class="oi oi-heart" style="color: red"></span>@post.Likes
            </button></span>
            
     </div>
    <div class="row border-bottom border-secondary p-3">
        <div class="col-sm-auto">
            <img src="images/Picture.png" class="img rounded-circle"
                style="width: 50px; height: 50px; outline: none; cursor: pointer" />
        </div>
        <div class="col-6">
            <div class="container">
                <EditForm Model="@comment" OnValidSubmit="@SendComment">
                    <InputText class="form-control bg-dark text-light shadow-none border-0" @bind-Value="@(comment.Title)"
                        placeholder="Insert a title"></InputText>
                    <textarea class="form-control bg-dark text-light shadow-none border-0" rows="1"
                        style="resize: none; overflow: hidden; font-size: large; margin-top: 10px"
                        oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"'
                        @bind="@(comment.Description)" 
                        placeholder="I'm not a bug, I'm a feature! (Content)"></textarea>

                    <button type="submit" class="btn btn-primary mt-2 float-left static">Comment</button>
                </EditForm>
            </div>
        </div>
    </div>
    @foreach (var _comment in comments)
    {
        <div class="row pt-3">
            <div class="col-sm-auto">
                <img src="images/Picture.png" class="img rounded-circle"
                style="width: 50px; height: 50px; outline: none; cursor: pointer"
                @onclick="() => GoToProfile(_comment.Username)" />
            </div>
            <div class="col-auto">
                <a class="mr-1" style="color: black;" href="/profile/@(post.Creator)">@(_comment.Username)</a>
                <span class="mr-1" style="color: gray">@("@" + _comment.Username)</span>
            </div>
        </div>
        
<div class="row border-bottom border-secondary">
    <div class="col-sm-1"></div>
    <div class="col-8">
        <h5 style="margin-left: -83px; margin-top: -15px;"><b>@_comment.Title</b></h5>
            <p style="margin-left: -60px;">
                <a class="mb-1" style="color: black; word-wrap: break-word; text-decoration: none;" href="post/@post.Id">@(_comment.Description)</a>
            </p>
    </div>
</div>
      
    }
</div>
@code{
    [Parameter] 
     public string postId{get; set;}
     public int id = 0;
     public string username,response = "";
     public PostDTO post = new PostDTO();
     public CommentDTO comment = new CommentDTO();
     public List<CommentDTO> comments = new List<CommentDTO>();
    public bool showAlert, isSuccess = false;
     protected override async Task OnInitializedAsync()
     {
        id = int.Parse(postId);
        var authState  = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        username = user.Identity.Name.ToString();
        try{
            post = await PostService.GetPost(username, id);
            comments = await PostService.GetComments(username, id);
            StateHasChanged();
        }
        catch(Exception e){
            Console.WriteLine(e);
        }
     }
     private void GoToProfile(string username){
        navManager.NavigateTo("/profile/" + username);
    }

    private async Task ReactToPost(int id){
        response = await PostService.ReactToPost(username, id,1);
        if(response == "Reaction added!"){
            post.Likes++;
            showAlert = true;
            isSuccess = true;
            ShowAlert("Post reacted successfully");
            StateHasChanged();
            }
        else{
            showAlert = true;
            isSuccess = false;
            ShowAlert("Error reacting to post");
            StateHasChanged();
        }
    }
    private async Task ShowAlert(string result){
        showAlert = true;
        response = result;
        await Task.Delay(2000);
        showAlert = false;
        response = "";
        StateHasChanged();
    }

    private async Task SendComment(){
        await PostService.Comment(username, comment.Title, comment.Description, id);
    }
}